# -*- coding: utf-8 -*-
"""Desafio Tunts Douglas Rodrigues.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cvF_Jre-x3yDBBKE5qsam7MY31tTf7fT

#Installation and inclusion of necessary libraries
"""

#Installation and inclusion of necessary libraries

!pip install gspread
import math
from google.colab import auth
import gspread
from oauth2client.client import GoogleCredentials

"""Authentication"""

#Authentication

auth.authenticate_user()
gc = gspread.authorize(GoogleCredentials.get_application_default())

"""Spreadsheet opening"""

#Spreadsheet opening

spreadsheet = gc.open('Engenharia de Software - Desafio Dougls Rodrigues')
page = spreadsheet.sheet1

"""Class that will update the spreadsheet"""

#Class that will update the spreadsheet

class UpdateSheet:
  
  #Column mapping 
  def __init__(self):
    print ("running column mapping\n")
    self.matricula = 1
    self.aluno = 2
    self.faltas = 3
    self.p1 = 4
    self.p2 = 5
    self.p3 = 6
    self.situacao = 7
    self.nota_para_aprovacao_final = 8

  #mean of the test grades  P1, P2 and P3
  def mean (self,ind):
    print ("Calculating the grades mean of ", page.row_values(ind)[self.aluno-1],"\n")
    log_m = ((float(page.row_values(ind)[self.p1-1]))+ (float(page.row_values(ind)[self.p2-1]))+(float(page.row_values(ind)[self.p3-1])))/3.0
    print ("The grades mean of ",page.row_values(ind)[self.aluno-1], " is ", log_m)
    return  log_m

  #absences verification
  def check_absences (self,ind):
    print ("Checking absences of ", page.row_values(ind)[self.aluno-1],"\n")
    absences = float(page.row_values(ind)[self.faltas-1])/60.0
    print ( page.row_values(ind)[self.aluno-1], " have ", round(absences*100,2), "% of absences\n")
    if(absences<= 0.25):
      return True
    else:
      return False
  
  #Situation update
  def get_update(self, ind):
    #Checking the absences, case the student not have issues with absences his grades will be verified
    if(self.check_absences(ind)): 
      m = self.mean(ind)
      #Checking if the student is failing by grade
      if(m<50.0): 
        print (page.row_values(ind)[self.aluno-1], " is disapproved by grade")
        page.update_cell(ind, self.situacao, "Reprovado por Nota")
        page.update_cell(ind, self.nota_para_aprovacao_final, 0)
      #Checking if the student can go to the final exam  
      elif((m >= 50.0) and (m < 70.0)):
        print (page.row_values(ind)[self.aluno-1], " will go to the final exam")
        page.update_cell(ind, self.situacao, "Exame Final")
        naf = math.ceil(100-m)
        page.update_cell(ind, self.nota_para_aprovacao_final, naf)
      #If the student's grade mean is greater than or equal to 7 he is approved
      else:
        print (page.row_values(ind)[self.aluno-1], " is approved")
        page.update_cell(ind, self.situacao,"Aprovado")
        page.update_cell(ind, self.nota_para_aprovacao_final, 0)
    #Case the student does not have enough presence, it will fail regardless of the grades
    else:
      print (page.row_values(ind)[self.aluno-1], " is disapproved by absence")
      page.update_cell(ind, self.situacao, "Reprovado por Falta")
      page.update_cell(ind, self.nota_para_aprovacao_final, 0)

#Main function
def main():
  i = 4
  spreadsheet_updater = UpdateSheet()
  while(page.row_values(i)!=[]):
    print ("\n-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-\n")
    spreadsheet_updater.get_update(i)
    i+=1

#Call of the main function
main()